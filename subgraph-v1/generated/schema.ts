// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PoolConfiguration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolConfiguration entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolConfiguration must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolConfiguration", id.toString(), this);
    }
  }

  static load(id: string): PoolConfiguration | null {
    return changetype<PoolConfiguration | null>(
      store.get("PoolConfiguration", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get marginRequirement(): BigInt {
    let value = this.get("marginRequirement");
    return value!.toBigInt();
  }

  set marginRequirement(value: BigInt) {
    this.set("marginRequirement", Value.fromBigInt(value));
  }

  get marginMin(): BigInt {
    let value = this.get("marginMin");
    return value!.toBigInt();
  }

  set marginMin(value: BigInt) {
    this.set("marginMin", Value.fromBigInt(value));
  }

  get marginMax(): BigInt {
    let value = this.get("marginMax");
    return value!.toBigInt();
  }

  set marginMax(value: BigInt) {
    this.set("marginMax", Value.fromBigInt(value));
  }

  get loanTenure(): BigInt {
    let value = this.get("loanTenure");
    return value!.toBigInt();
  }

  set loanTenure(value: BigInt) {
    this.set("loanTenure", Value.fromBigInt(value));
  }

  get optimalTrancheRatio(): BigInt {
    let value = this.get("optimalTrancheRatio");
    return value!.toBigInt();
  }

  set optimalTrancheRatio(value: BigInt) {
    this.set("optimalTrancheRatio", Value.fromBigInt(value));
  }

  get optimalIncomeRatio(): BigInt {
    let value = this.get("optimalIncomeRatio");
    return value!.toBigInt();
  }

  set optimalIncomeRatio(value: BigInt) {
    this.set("optimalIncomeRatio", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value!.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get underlyingAsset(): Bytes {
    let value = this.get("underlyingAsset");
    return value!.toBytes();
  }

  set underlyingAsset(value: Bytes) {
    this.set("underlyingAsset", Value.fromBytes(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get juniorTrancheTotalLiquidity(): BigInt {
    let value = this.get("juniorTrancheTotalLiquidity");
    return value!.toBigInt();
  }

  set juniorTrancheTotalLiquidity(value: BigInt) {
    this.set("juniorTrancheTotalLiquidity", Value.fromBigInt(value));
  }

  get juniorTrancheLiquidityRate(): BigInt {
    let value = this.get("juniorTrancheLiquidityRate");
    return value!.toBigInt();
  }

  set juniorTrancheLiquidityRate(value: BigInt) {
    this.set("juniorTrancheLiquidityRate", Value.fromBigInt(value));
  }

  get seniorTrancheTotalLiquidity(): BigInt {
    let value = this.get("seniorTrancheTotalLiquidity");
    return value!.toBigInt();
  }

  set seniorTrancheTotalLiquidity(value: BigInt) {
    this.set("seniorTrancheTotalLiquidity", Value.fromBigInt(value));
  }

  get seniorTrancheAvailableLiquidity(): BigInt {
    let value = this.get("seniorTrancheAvailableLiquidity");
    return value!.toBigInt();
  }

  set seniorTrancheAvailableLiquidity(value: BigInt) {
    this.set("seniorTrancheAvailableLiquidity", Value.fromBigInt(value));
  }

  get seniorTrancheLiquidityRate(): BigInt {
    let value = this.get("seniorTrancheLiquidityRate");
    return value!.toBigInt();
  }

  set seniorTrancheLiquidityRate(value: BigInt) {
    this.set("seniorTrancheLiquidityRate", Value.fromBigInt(value));
  }

  get totalLiquidity(): BigInt {
    let value = this.get("totalLiquidity");
    return value!.toBigInt();
  }

  set totalLiquidity(value: BigInt) {
    this.set("totalLiquidity", Value.fromBigInt(value));
  }

  get totalBorrow(): BigInt {
    let value = this.get("totalBorrow");
    return value!.toBigInt();
  }

  set totalBorrow(value: BigInt) {
    this.set("totalBorrow", Value.fromBigInt(value));
  }

  get trancheRatio(): BigInt {
    let value = this.get("trancheRatio");
    return value!.toBigInt();
  }

  set trancheRatio(value: BigInt) {
    this.set("trancheRatio", Value.fromBigInt(value));
  }

  get configuration(): string | null {
    let value = this.get("configuration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set configuration(value: string | null) {
    if (!value) {
      this.unset("configuration");
    } else {
      this.set("configuration", Value.fromString(<string>value));
    }
  }
}

export class UserData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserData", id.toString(), this);
    }
  }

  static load(id: string): UserData | null {
    return changetype<UserData | null>(store.get("UserData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get depositData(): Array<string> {
    let value = this.get("depositData");
    return value!.toStringArray();
  }

  set depositData(value: Array<string>) {
    this.set("depositData", Value.fromStringArray(value));
  }

  get unbondings(): Array<string> {
    let value = this.get("unbondings");
    return value!.toStringArray();
  }

  set unbondings(value: Array<string>) {
    this.set("unbondings", Value.fromStringArray(value));
  }
}

export class UserDepositData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserDepositData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserDepositData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserDepositData", id.toString(), this);
    }
  }

  static load(id: string): UserDepositData | null {
    return changetype<UserDepositData | null>(store.get("UserDepositData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlyingAsset(): Bytes {
    let value = this.get("underlyingAsset");
    return value!.toBytes();
  }

  set underlyingAsset(value: Bytes) {
    this.set("underlyingAsset", Value.fromBytes(value));
  }

  get juniorTrancheBalance(): BigInt {
    let value = this.get("juniorTrancheBalance");
    return value!.toBigInt();
  }

  set juniorTrancheBalance(value: BigInt) {
    this.set("juniorTrancheBalance", Value.fromBigInt(value));
  }

  get seniorTrancheBalance(): BigInt {
    let value = this.get("seniorTrancheBalance");
    return value!.toBigInt();
  }

  set seniorTrancheBalance(value: BigInt) {
    this.set("seniorTrancheBalance", Value.fromBigInt(value));
  }

  get withdrawableJuniorBalance(): BigInt {
    let value = this.get("withdrawableJuniorBalance");
    return value!.toBigInt();
  }

  set withdrawableJuniorBalance(value: BigInt) {
    this.set("withdrawableJuniorBalance", Value.fromBigInt(value));
  }

  get withdrawableSeniorBalance(): BigInt {
    let value = this.get("withdrawableSeniorBalance");
    return value!.toBigInt();
  }

  set withdrawableSeniorBalance(value: BigInt) {
    this.set("withdrawableSeniorBalance", Value.fromBigInt(value));
  }

  get decimals(): string {
    let value = this.get("decimals");
    return value!.toString();
  }

  set decimals(value: string) {
    this.set("decimals", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}

export class Unbonding extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Unbonding entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Unbonding must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Unbonding", id.toString(), this);
    }
  }

  static load(id: string): Unbonding | null {
    return changetype<Unbonding | null>(store.get("Unbonding", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get type(): i32 {
    let value = this.get("type");
    return value!.toI32();
  }

  set type(value: i32) {
    this.set("type", Value.fromI32(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}
