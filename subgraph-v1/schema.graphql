"""
Market represents a deployment of the Voyage protocol
"""
type Market @entity {
  id: ID!
  reserves: [Reserve!]! @derivedFrom(field: "market")
  protocolFee: BigInt!
  protocolTreasury: Bytes!
}

type Reserve @entity {
  id: ID!
  market: Market!
  collection: Bytes!
  currency: Currency!
  configuration: ReserveConfiguration

  totalPrincipal: BigInt!
  totalInterest: BigInt!
  totalBorrow: BigInt!
  availableLiquidity: BigInt!
  totalLiquidity: BigInt!
  liquidityRatio: BigInt!
  utilizationRate: BigInt!

  borrowRate: BigInt!
  depositRate: BigInt!

  seniorTrancheVToken: VToken!
  seniorTrancheLiquidity: BigInt!
  seniorTrancheDepositRate: BigInt!

  juniorTrancheVToken: VToken!
  juniorTrancheLiquidity: BigInt!
  juniorTrancheDepositRate: BigInt!

  # relations
  userDeposits: [UserDepositData!]! @derivedFrom(field: "reserve")
}

type ReserveConfiguration @entity {
  id: ID!
  reserve: Reserve!
  isInitialized: Boolean!
  isActive: Boolean!
  incomeRatio: BigInt!
  loanInterval: BigInt!
  loanTenure: BigInt!
  gracePeriod: BigInt!
  liquidationBonus: BigInt!
}

type Currency @entity(immutable: true) {
  id: ID! # id is the address of the currency
  symbol: String!
  decimals: BigInt!
}

enum Tranche {
  Senior
  Junior
}

type VToken @entity {
  id: ID! # address of Junior/Senior deposit token
  reserve: Reserve!
  tranche: Tranche!
  asset: Currency!
  totalAssets: BigInt!
  totalShares: BigInt!
}

type UserData @entity {
  id: ID!
  deposits: [UserDepositData!]! @derivedFrom(field: "user")
  unbonding: [UserUnbondingData!]! @derivedFrom(field: "user")
}

type UserDepositData @entity {
  """
  user address + reserve id
  """
  id: ID!
  user: UserData!
  reserve: Reserve!
  # The **current** shares held by the user. Used to compute current holdings (maxWithdraw)
  juniorTrancheShares: BigInt!
  # The cumulative deposits (in assets) as emitted in the Deposit event. Used for PnL.
  juniorTrancheCumulativeDeposits: BigInt!
  # The cumulative withdrawals (in assets) as emitted in the Withdraw event. Used for PnL.
  juniorTrancheCumulativeWithdrawals: BigInt!
  # The **current** shares held by the user. Used to compute current holdings (maxWithdraw)
  seniorTrancheShares: BigInt!
  # The cumulative deposits (in assets) as emitted in the Deposit event. Used for PnL.
  seniorTrancheCumulativeDeposits: BigInt!
  # The cumulative withdrawals (in assets) as emitted in the Claim event. Used for PnL.
  seniorTrancheCumulativeWithdrawals: BigInt!
}

type UserUnbondingData @entity {
  """
  user address + collection address
  """
  id: ID!
  time: BigInt!
  collection: Bytes!
  blocknum: BigInt!
  shares: BigInt!
  maxUnderlying: BigInt!
  user: UserData!
}

type Vault @entity {
  """
  The vault proxy address
  """
  id: ID!
  # The EOA used to sign on behalf of the Vault. In most cases, generated through Web3Auth.
  signer: Bytes!
  loans: [Loan!]! @derivedFrom(field: "vault")
  assets: [Asset!]! @derivedFrom(field: "vault")
}

type Asset @entity {
  """
  collection + token id
  """
  id: ID!
  vault: Vault!
  loan: Loan!
  collection: Bytes!
  tokenId: BigInt!
  isUnderLien: Boolean!
  isLiquidated: Boolean!
}

type Loan @entity {
  """
  vault + loan id
  """
  id: ID!
  reserve: Reserve!
  vault: Vault!
  loanId: BigInt!
  collateral: Asset

  principal: BigInt!
  interest: BigInt!
  protocolFee: BigInt!

  pmt_principal: BigInt!
  pmt_interest: BigInt!
  pmt_fee: BigInt!
  pmt_payment: BigInt!

  term: BigInt!
  epoch: BigInt!
  nper: BigInt!
  apr: BigInt!

  timestamp: BigInt!
  nextPaymentDue: BigInt!

  totalPrincipalPaid: BigInt!
  totalInterestPaid: BigInt!
  paidTimes: BigInt!
  closed: Boolean!

  repayments: [Repayment!]! @derivedFrom(field: "loan")
  liquidation: Liquidation @derivedFrom(field: "loan")
}

type Repayment @entity {
  id: ID! # concat(vault + loanId + repaymentId)
  loan: Loan!
  principal: BigInt!
  interest: BigInt!
  fee: BigInt!
  total: BigInt!
  paidAt: BigInt!
  isFinal: Boolean!
  liquidation: Liquidation
  txHash: Bytes!
}

type Liquidation @entity {
  id: ID! # same as Repayment.id
  vault: Vault!
  loan: Loan!
  liquidator: String! # address of user
  repaymentId: BigInt! # id in sc
  repayment: Repayment!
  totalDebt: BigInt!
  amountToWriteDown: BigInt!
}

type BuyNowTransaction @entity {
  id: ID! # concat(vault + loanId + collection)
  tokenId: BigInt!
  collection: Bytes!
  vault: Bytes!

  txHash: Bytes!
  marketplace: Bytes!
}
