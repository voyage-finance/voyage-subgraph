type PoolConfiguration @entity {
  id: ID!
  pool: Pool!
  marginRequirement: BigInt!
  marginMin: BigInt!
  marginMax: BigInt!
  loanTenure: BigInt!
  optimalTrancheRatio: BigInt!
  optimalIncomeRatio: BigInt!
}

type Pool @entity {
  id: ID!
  isActive: Boolean!
  underlyingAsset: Bytes!
  symbol: String!
  decimals: BigInt!
  juniorTrancheTotalLiquidity: BigInt!
  juniorTrancheLiquidityRate: BigInt!
  seniorTrancheTotalLiquidity: BigInt!
  seniorTrancheAvailableLiquidity: BigInt!
  seniorTrancheLiquidityRate: BigInt!
  totalLiquidity: BigInt!
  totalBorrow: BigInt!
  trancheRatio: BigInt!
  configuration: PoolConfiguration
}

type UserData @entity {
  id: ID!
  depositData: [UserDepositData!]! @derivedFrom(field: "user")
  unbondings: [Unbonding!]! @derivedFrom(field: "user")
  vault: Vault # a user may only be a depositor. vault is optional.
}

type UserDepositData @entity {
  id: ID!
  underlyingAsset: Bytes!
  juniorTrancheBalance: BigInt!
  juniorDepositWithdrawalDiff: BigInt!
  juniorTranchePnl: BigInt!
  seniorTrancheBalance: BigInt!
  seniorDepositWithdrawalDiff: BigInt!
  seniorTranchePnl: BigInt!
  withdrawableJuniorBalance: BigInt!
  withdrawableSeniorBalance: BigInt!
  decimals: BigInt!
  user: UserData!
}

enum Tranche {
  Senior
  Junior
}

type Unbonding @entity {
  id: ID!
  time: BigInt!
  amount: BigInt!
  type: Tranche!
  user: UserData!
}

type Vault @entity {
  id: ID!
  user: UserData!
  creditLines: [CreditLine!]! @derivedFrom(field: "vault")
  loans: [Loan!]! @derivedFrom(field: "vault")
}

type CreditLine @entity {
  id: ID! # concat(vault address, underlying asset)
  vault: Vault!
  pool: Pool!
  marginEscrow: Bytes!
  creditEscrow: Bytes!
  borrowRate: BigInt! # weighted average, updated on every borrow and final repayment
  totalDebt: BigInt!
  totalMargin: BigInt!
  marginRequirement: BigInt!
  withdrawableSecurityDeposit: BigInt!
  creditLimit: BigInt!
  spendableBalance: BigInt!
  gav: BigInt!
  ltv: BigInt!
  healthFactor: BigInt!
}

type Loan @entity {
  id: ID! # concat(vault address, underlying asset, drawdown id)
  vault: Vault!
  pool: Pool!
  pmt_principal: BigInt!
  pmt_interest: BigInt!
  pmt_payment: BigInt!
  principal: BigInt!
  term: BigInt!
  epoch: BigInt!
  nper: BigInt!
  apr: BigInt!
  borrowAt: BigInt!
  nextPaymentDue: BigInt!
  totalPrincipalPaid: BigInt!
  totalInterestPaid: BigInt!
  paidTimes: BigInt!
  repayments: [Repayment!]! @derivedFrom(field: "loan")
  liquidations: [Liquidation!]! @derivedFrom(field: "loan")
}

type Repayment @entity {
  id: ID! # concat(vault address, underlying asset, drawdown id, repayment index)
  loan: Loan!
  principal: BigInt!
  interest: BigInt!
  total: BigInt!
  paidAt: BigInt!
  repaid: Boolean!
  isLiquidated: Boolean!
  liquidation: Liquidation!
}

type Liquidation @entity {
  id: ID! # same as Repayment.id
  liquidator: String! # address of user
  vault: Vault!
  reserve: Pool!
  loanId: BigInt! # id in sc's
  repaymentId: BigInt! # id in sc's
  loan: Loan!
  repayment: Repayment!
  totalDebt: BigInt!
  amountSlashed: BigInt!
  totalToLiquidate: BigInt!
  numNFTsToLiquidate: BigInt!
  amountToWriteDown: BigInt!
}
